/*
 * Copyright (c) 2008-2015 MongoDB, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply from: "gradle/examples.gradle"

allprojects {
    group = 'org.mongodb'
    version = '1.0-SNAPSHOT'
}

def configDir = new File(rootDir, 'config')

repositories {
    mavenLocal()
    mavenCentral()
}

configure(subprojects) {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'eclipse'
    apply plugin: 'checkstyle'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    dependencies {
        compile 'org.mongodb:mongo-java-driver:3.0.3'
        compile 'org.apache.spark:spark-core_2.10:1.4.1'

        testCompile 'junit:junit:4.11'
    }

    checkstyle {
        toolVersion = "6.2"
        configFile = new File("$configDir/checkstyle.xml")
    }
}

jar {
    dependsOn compileJava

    def srcProjects = subprojects.findAll{ !it.name.contains('examples/') }
    srcProjects.collect{with it.jar}
}

project(':core') {
    archivesBaseName = "mongo-spark-core"
}

project(':sql') {
    archivesBaseName = "mongo-spark-sql"

    dependencies {
        compile project(':core')

        compile 'org.apache.spark:spark-sql_2.10:1.4.1'
    }

    jar {
        from project(':core').sourceSets.main.output
        from sourceSets.main.output

        configurations.compile.filter {
            it.name.startsWith('mongo-java-driver')
        }.each {
            from zipTree(it)
        }
    }
}

project(':examples/enron') {
    archivesBaseName = "enron"

    dependencies {
        compile project(':core')
    }

    jar {
        with rootProject.jar
    }
}
